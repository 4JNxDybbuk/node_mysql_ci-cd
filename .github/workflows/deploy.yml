name: CI/CD pipeline for node mysql projects

on:
    push:
        branches: [master]

jobs:

    deploy:
        runs-on: ubuntu-latest

        # run mysql in docker container
        services:

            mysql:
                image: mysql:latest
                ports:
                    - 3306:3306
                env:
                    MYSQL_USER: admin
                    MYSQL_PASSWORD: admin123
                    MYSQL_ROOT_PASSWORD: root
                    MYSQL_DATABASE: UserDB
                    # MYSQL_DEFAULT_AUTHENTICATION_PLUGIN: mysql_native_password
                
                # options: >-
                #     --default-authentication-plugin=mysql_native_password
                #     --health-cmd="mysqladmin ping --silent"
                #     --health-interval=10s
                #     --health-timeout=5s
                #     --health-retries=3

        # Steps for running node & mysql
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            
            - name: Setup node
              uses: actions/setup-node@v3
              with:
                node-version: '18.x'
            
            - name: Install dependancy
              run: npm install
            
            

            - name: Mysql setup
              run: |
                until mysqladmin ping -h 127.0.0.1 -P 3306 --user=admin --password=admin123 --silent; do
                echo 'Waiting for MySQL...'
                sleep 3
                done
            
            - name: Create datbase & tables
              run: |
                mysql -h 127.0.0.1 -P 3306 -u admin -padmin123 -e "CREATE DATABASE IF NOT EXISTS UserDB;"
                mysql -h 127.0.0.1 -P 3306 -u admin -padmin123 UserDB < script.sql
            
            - name: Setup env varialbles
              run: |
                echo "PORT=8080" >> .env
                echo "DB_HOST=127.0.0.1" >> .env
                echo "DB_PORT=3306" >> .env
                echo "DB_USER=admin" >> .env
                echo "DB_PASSWORD=admin123" >> .env
                echo "DB_DATABASE=UserDB" >> .env
            
              # nohup: This command runs the process in a way that it ignores the hangup signal, which allows it to keep running even after the terminal that started it has been closed.
              # &: This puts the process in the background, allowing the workflow to continue with subsequent steps (if any) or to complete.
            # - name: Start node server
            #   run: |
            #     nohup npm run prod &


            - name: Install Ngrok
              run: |
                curl -s https://bin.equinox.io/c/4b7d1b1e9a8c/ngrok-stable-linux-amd64.zip -o ngrok.zip
                unzip ngrok.zip
                sudo mv ngrok /usr/local/bin
                rm ngrok.zip
            
            - name: Start Node.js Server and Ngrok
              run: |
                nohup npm run prod &
                nohup ngrok http 8080 &
                sleep 10

            - name: Get Ngrok URL
              run: |
                curl --silent http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url

            - name: Job completed
              run: echo "Server stared!!"